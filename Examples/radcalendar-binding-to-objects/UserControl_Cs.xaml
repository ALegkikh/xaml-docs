<UserControl x:Class="WpfApplication1.Default_Cs"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">
    <Grid>
            
    
<!-- #region radcalendar-binding-to-objects_0 -->
<UserControl x:Class="SimpleTwoWayDataBinding.Page"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
    xmlns:telerik="http://schemas.telerik.com/2008/xaml/presentation"
    MinWidth="400" MinHeight="300">
    <Grid x:Name="LayoutRoot" Background="White">
        <StackPanel x:Name="parentPanel" Width="250">
            <telerik:RadCalendar SelectedDate="{Binding ArrivalDate, Mode=TwoWay}"/>
            <TextBlock FontWeight="Bold"
                       Text="SelectedDate" />
            <TextBlock Text="{Binding ArrivalDate}" />
            <Button Content="Select Next Day" Click="Button_Click"/>
        </StackPanel>
    </Grid>
</UserControl>
<!-- #endregion -->

<!-- #region radcalendar-binding-to-objects_1 -->
using System;
using System.ComponentModel;
using System.Windows;
using System.Windows.Controls;
namespace SimpleTwoWayDataBinding
{
    public partial class Page : UserControl
    {
        OrderInfo myOrderInfo;
        public Page()
        {
            InitializeComponent();
            myOrderInfo = new OrderInfo()
            {
                ArrivalDate = DateTime.Today.AddDays(3),
                ProductName = "Good CDs"
            };
            // The object is set as data context of a parent of the controls, this way 
            // it appears both in the TextBlock and the Calendar.
            parentPanel.DataContext = myOrderInfo;
        }
        private void Button_Click(object sender, RoutedEventArgs e)
        {
            if (myOrderInfo.ArrivalDate.HasValue)
            {
                myOrderInfo.ArrivalDate = myOrderInfo.ArrivalDate.Value.AddDays(1);
            }
        }
    }
    /// <summary>
    /// The business object that will be bound to the control.
    /// </summary>
    public class OrderInfo : INotifyPropertyChanged
    {
        private DateTime? arrivalDate;
        /// <summary>
        /// Gets or sets the date on which the delivery is expected to arrive.
        /// </summary>
        public DateTime? ArrivalDate
        {
            get
            {
                return this.arrivalDate;
            }
            set
            {
                if (this.arrivalDate != value)
                {
                    this.arrivalDate = value;
                    OnPropertyChanged("ArrivalDate");
                }
            }
        }
        private String productName;
        /// <summary>
        /// Gets or sets the name of the product.
        /// </summary>
        public String ProductName
        {
            get
            {
                return this.productName;
            }
            set
            {
                if (this.productName != value)
                {
                    this.productName = value;
                    OnPropertyChanged("ProductName");
                }
            }
        }
        /// <summary>
        ///     Called when the value of a property changes.
        /// </summary>
        /// <param name="propertyName">The name of the property that has changed.</param>
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        /// <summary>
        ///     Raised when the value of one of the properties changes.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;
    }
}
<!-- #endregion -->
</Grid>
</UserControl>
